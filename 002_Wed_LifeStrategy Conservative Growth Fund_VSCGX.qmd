---
title: "LifeStrategy Conservative Growth Fund(VSCGX)"
format: html
editor: visual
toc: true
---

### Fund Summary

You may be interested in this fund if you care about current income more than long-term growth, but still want some growth potential with less exposure to stock market risk.

```{r}
#| echo: false
#| message: false
#| warning: false

# Load packages
library(tidyquant)
library(tidyverse)
library(pracma)
library(fable)
library(fabletools)
library(tsibble)
library(lubridate)
library(pracma)
library(feasts)
library(zoo)
library(prophet)

theme_set(theme_light())
```

```{r}
rm(list=ls())
VSCGX <- tq_get("VSCGX") |> filter(date >="2025-01-01")
VSCGX_div <- tq_get("VSCGX",get="dividends")
VSCGX|> select(date,close) |> summary()
```


### Boxplot and Histogram

```{r}
ggplot(VSCGX) + geom_histogram(aes(x=close))
```
```{r}
ggplot(VSCGX) + geom_boxplot(aes(x=close))
```

### Close + 100 Day Moving Average

```{r}
VSCGX$rolling_100d <- movavg(VSCGX$close,100,type=c("s"))
ggplot(VSCGX) + geom_line(aes(x=date,y=close,colour="Close"),linewidth=1) +
  geom_line(aes(x=date,y=rolling_100d,colour="50d Rolling"),linewidth=1) +
  theme_tq() + labs(title="vscgx Closng Prices w/ 100 day MA")
  
```

### Bollinger Bands

```{r}
VSCGX_bb <- VSCGX %>%
  tq_mutate(select = close, mutate_fun = BBands) |> na.omit()

ggplot(VSCGX_bb, aes(x = date)) +
  geom_ribbon(aes(ymin = dn, ymax = up), fill = "lightblue", alpha = 0.3) +
  geom_line(aes(y = close), color = "blue", linewidth= 0.8) +
  geom_line(aes(y = up), color = "red", linetype = "dashed") +
  geom_line(aes(y = dn), color = "red", linetype = "dashed") +
  geom_line(aes(y = mavg), color = "darkgreen", linetype = "dotdash") +
  labs(title = "vscgx - Bollinger Bands (YTD)", x = "Date", y = "Closing Price") +
  theme_tq()

```

### Forecast ETS and ARIMA Using Fable

```{r}


# Step 1: Get YTD IBM stock data
VSCGX_data <- tq_get("VSCGX", from = floor_date(Sys.Date(), "year")) %>%
  select(date, close)

# Step 2: Fill missing dates and LOCF for ETS compatibility
ibm_filled <- VSCGX_data %>%
  rename(Close = close) %>%
  mutate(date = as_date(date)) %>%
  complete(date = seq.Date(min(date), max(date), by = "day")) %>%
  arrange(date) %>%
  mutate(Close = zoo::na.locf(Close, na.rm = FALSE))  # Fill gaps

# Step 3: Convert to tsibble
ibm_tsibble <- ibm_filled %>%
  as_tsibble(index = date)

# Step 4: Fit models
models <- ibm_tsibble %>%
  model(
    arima = ARIMA(Close),
    ets = ETS(Close)
  )

# Step 5: Forecast
forecasts <- models %>%
  forecast(h = "30 days")

# Step 6: Separate the forecasts by model
arima_forecast <- forecasts %>% filter(.model == "arima")
ets_forecast <- forecasts %>% filter(.model == "ets")

```

### Basic ETS

```{r}
# Step 8: Plot ETS forecast
autoplot(ets_forecast, ibm_tsibble, level = 95) +
  labs(
    title = "30-Day Forecast for VSCGX Closing Price (ETS)",
    subtitle = "ETS model forecast with 95% CI",
    y = "Closing Price (USD)",
    x = "Date"
  ) +
  theme_minimal()
```

### Basic ARIMA

```{r}
# Step 7: Plot ARIMA forecast
autoplot(arima_forecast, ibm_tsibble, level = 95) +
  labs(
    title = "30-Day Forecast for VSCGX Closing Price (ARIMA)",
    subtitle = "ARIMA model forecast with 95% CI",
    y = "Closing Price (USD)",
    x = "Date"
  ) +
  theme_minimal()
```

### ARIMA Geimini AI Adjsuted

```{r}
# 1. Fetch data and prepare it
IBM_dat <- VSCGX %>%
  filter(date >= "2025-01-01") %>%
  mutate(date = ymd(date)) %>%
  select(date, close) %>%
  arrange(date)

# 2. Regularize index by converting to tsibble and filling gaps
IBM_ts <- IBM_dat %>%
  as_tsibble(index = date) %>%
  fill_gaps()

# 3. Fit ARIMA model
fit <- IBM_ts %>%
  model(arima = ARIMA(close, stepwise = FALSE, approximation = FALSE))

# 4. Forecast next 10 days
fc <- forecast(fit, h = "14 days")


# 6. Plot only April+ history alongside forecast and smooth trend

fc %>%
  autoplot(IBM_ts) +
  labs(title = "ARIMA(AI ) Forecast 14 Day (VSCGX)",
       y = "Close Price") +
  geom_smooth(
    data = IBM_ts %>% filter(!is.na(date), !is.na(close)),
    aes(x = date, y = close),
    se = FALSE,
    color = "red"
  )

```

### Foreasting With Prophet

```{r}

# Step 1: Get last 12 months of IBM data
ibm_data <- VSCGX |>
  select(date, close) %>%
  rename(ds = date, y = close)

# Step 2: Fit Prophet model
m <- prophet(ibm_data)

# Step 3: Forecast next 30 days
future <- make_future_dataframe(m, periods = 30)
forecast <- predict(m, future)

# Step 4: Merge for plotting
plot_data <- forecast %>%
  select(ds, yhat, yhat_lower, yhat_upper) %>%
  left_join(ibm_data, by = "ds")

# Step 5: Gather into long format for line names
plot_lines <- plot_data %>%
  pivot_longer(cols = c(y, yhat), names_to = "type", values_to = "value") %>%
  mutate(type = recode(type, y = "Actual", yhat = "Forecast"))

```

```{r}
# Step 6: Plot with legends
ggplot() +
  geom_ribbon(data = plot_data, aes(x = ds, ymin = yhat_lower, ymax = yhat_upper),
              fill = "lightblue", alpha = 0.4) +
  geom_line(data = plot_lines, aes(x = ds, y = value, color = type), size = 1) +
  scale_color_manual(values = c("Actual" = "black", "Forecast" = "blue")) +
  labs(
    title = " VASIX Closing Price Forecast (6-Month History + 30-Day Forecast)",
    x = "Date",
    y = "Closing Price (USD)",
    color = "Legend",
    caption = "Dashed = Actual | Solid = Forecast | Ribbon = 95% CI"
  ) +
  theme_tq()
```

### Dividend

```{r}
# vscgx_div <- etf_div |> filter(symbol=='VSCGX')
ggplot(VSCGX_div) + geom_col(aes(x=date,y=value))
```
